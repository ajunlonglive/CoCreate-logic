(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["CoCreateLogic"] = factory();
	else
		root["CoCreateLogic"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./CoCreate-components/CoCreate-logic/src/CoCreate-logic.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./CoCreate-components/CoCreate-logic/src/CoCreate-logic.js":
/*!******************************************************************!*\
  !*** ./CoCreate-components/CoCreate-logic/src/CoCreate-logic.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar CoCreateLogic = {\n  init: function init() {\n    this.__initKeys();\n\n    this.__initPassSessionIds();\n\n    this.__initPassParams();\n\n    this.__initPassValueParams(); // this.__initValuePassBtns();\n\n\n    this.__initGetValueInput();\n\n    this.initAtagElement();\n  },\n  // getKeys\n  __initKeys: function __initKeys() {\n    if (localStorage.getItem('apiKey')) {\n      config.apiKey = localStorage.getItem('apiKey');\n    }\n\n    if (localStorage.getItem('securityKey')) {\n      config.securityKey = localStorage.getItem('securityKey');\n    }\n\n    if (localStorage.getItem('organization_id')) {\n      config.organization_Id = localStorage.getItem('organization_id');\n    }\n  },\n  //. passSessionIds\n  __initPassSessionIds: function __initPassSessionIds() {\n    var orgId = localStorage.getItem('organization_id');\n    var user_id = localStorage.getItem('user_id');\n    var adminUI_id = localStorage.getItem('adminUI_id');\n    var builderUI_id = localStorage.getItem('builderUI_id');\n\n    this.__initPassItems(orgId, \".sessionOrg_Id\", true);\n\n    this.__initPassItems(user_id, \".sessionUser_Id\");\n\n    this.__initPassItems(adminUI_id, \".sessionAdminUI_Id\");\n\n    this.__initPassItems(builderUI_id, \".sessionBuilderUI_Id\");\n  },\n  initElement: function initElement(container) {\n    var self = this;\n    var mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    var elements = mainContainer.querySelectorAll('[data-pass_id]');\n    elements = Array.from(elements);\n\n    if (mainContainer != document && mainContainer.hasAttribute('data-pass_id')) {\n      elements.push(mainContainer);\n    }\n\n    var dataParams = localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return;\n    elements.forEach(function (el) {\n      if (CoCreateObserver.getInitialized(el)) {\n        return;\n      }\n\n      var pass_id = el.getAttribute('data-pass_id');\n      var paramObj = dataParams.find(function (x) {\n        return x.pass_to == pass_id;\n      });\n      if (!paramObj) return;\n      var collection = paramObj.collection,\n          document_id = paramObj.document_id,\n          pass_to = paramObj.pass_to,\n          prefix = paramObj.prefix;\n      CoCreateObserver.setInitialized(el);\n\n      if (el.tagName === \"FORM\" && !el.getAttribute('data-colleciton') && collection) {\n        el.setAttribute('data-colleciton', collection);\n      }\n\n      self.__setPassAttributes(el, paramObj);\n    });\n  },\n  initAtagElement: function initAtagElement() {\n    var self = this;\n    document.addEventListener('click', function (event) {\n      var target = event.target.closest('a, button');\n      if (!target) return;\n\n      if (target.getAttribute('target') === 'modal' && target.getAttribute('data-pass_to')) {\n        event.preventDefault(); // event.stopImmediatePropagation()\n\n        self.setLinkProcess(target);\n        return;\n      }\n\n      var href = target.getAttribute('href');\n\n      if (target.getAttribute('target') !== 'modal') {\n        if (target.hasAttribute('data-actions')) return;\n        if (!self.passSubmitProcess(target)) return;\n        var pass_to = target.getAttribute('data-pass_to');\n\n        if (href) {\n          event.preventDefault();\n          self.storePassData(target);\n          self.openAnother(target);\n        } else {\n          self.storePassData(target);\n\n          if (pass_to) {\n            self.__initPassParams(pass_to);\n          }\n        }\n      }\n    });\n  },\n  //. passParams\n  __initPassParams: function __initPassParams(pass_to) {\n    var dataParams = localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return;\n    var self = this;\n    dataParams.forEach(function (dataParam) {\n      var param_collection = dataParam.collection;\n      var param_document_id = dataParam.document_id;\n      var param_prefix = dataParam.prefix;\n      var param_pass_to = dataParam.pass_to;\n\n      if (pass_to && param_pass_to != pass_to) {\n        return;\n      }\n\n      var forms = document.querySelectorAll('form');\n      forms.forEach(function (form) {\n        var pass_id = form.getAttribute('data-pass_id');\n\n        if (pass_id && pass_id == param_pass_to && param_collection && param_collection != \"\") {\n          if (!form.getAttribute('data-collection')) {\n            form.setAttribute('data-collection', param_collection);\n          }\n        }\n      });\n      var allTags = document.querySelectorAll('[data-pass_id]');\n      allTags.forEach(function (tag) {\n        var pass_id = tag.getAttribute('data-pass_id');\n\n        if (pass_id && pass_id == param_pass_to) {\n          self.__setPassAttributes(tag, dataParam);\n        }\n      });\n    });\n  },\n  // passValueParams\n  __initPassValueParams: function __initPassValueParams(contianer) {\n    var valueParams = localStorage.getItem('valueParams');\n    valueParams = JSON.parse(valueParams);\n    if (!valueParams || valueParams.length == 0) return;\n    valueParams.forEach(function (valueParam) {\n      var pass_value_to = valueParam.pass_value_to; // var inputs = (contianer || document).querySelectorAll('input, textarea, select');\n\n      var inputs = (contianer || document).querySelectorAll('[data-pass_value_id]');\n      inputs.forEach(function (input) {\n        var pass_value_id = input.getAttribute('data-pass_value_id');\n\n        if (pass_value_id && pass_value_id == pass_value_to) {\n          if (['INPUT', 'TEXTAREA', 'SELECT'].includes(input.tagName)) {\n            input.value = valueParam.value;\n            if (CoCreateFloatLabel) CoCreateFloatLabel.update(input);\n          } else {\n            input.innerHTML = valueParam.value;\n          }\n        }\n      });\n    });\n  },\n  __getPassAttributes: function __getPassAttributes(element) {\n    return {\n      collection: element.getAttribute('data-pass_collection') || element.getAttribute('data-pass_fetch_collection'),\n      document_id: element.getAttribute('data-pass_document_id'),\n      name: element.getAttribute('data-pass_name'),\n      value: element.getAttribute('data-pass_value'),\n      pass_to: element.getAttribute('data-pass_to'),\n      filter_name: element.getAttribute('data-pass_filter_name'),\n      filter_value: element.getAttribute('data-pass_filter_value'),\n      prefix: element.getAttribute('data-pass_prefix') || \"\"\n    };\n  },\n  __setPassAttributes: function __setPassAttributes(el, param) {\n    var collection = param.collection,\n        document_id = param.document_id,\n        name = param.name,\n        value = param.value,\n        pass_to = param.pass_to,\n        filter_name = param.filter_name,\n        filter_value = param.filter_value,\n        prefix = param.prefix;\n    var pass_id = el.getAttribute('data-pass_id');\n    var isRefresh = el.hasAttribute('data-pass_refresh') ? true : false;\n    if (pass_id != pass_to) return;\n\n    if (collection) {\n      this.__setAttributeValueOfElement(el, 'data-collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_fetch_collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_collection', collection, isRefresh);\n    }\n\n    if (document_id) {\n      this.__setAttributeValueOfElement(el, 'data-document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_fetch_document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_document_id', document_id, isRefresh);\n    }\n\n    if (name) {\n      this.__setAttributeValueOfElement(el, 'name', name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_name', name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_name', name, isRefresh);\n    }\n\n    if (value) {\n      this.__setAttributeValueOfElement(el, 'value', value, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_value', value, isRefresh);\n    }\n\n    if (prefix) {\n      this.__setAttributeValueOfElement(el, 'name', prefix + el.getAttribute('name'), isRefresh, true);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_name', prefix + el.getAttribute('data-fetch_name'), isRefresh, true);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_prefix', prefix, isRefresh);\n    }\n\n    if (filter_name) {\n      this.__setAttributeValueOfElement(el, 'data-filter_name', filter_name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_filter_name', filter_name, isRefresh);\n    }\n\n    if (filter_value) {\n      this.__setAttributeValueOfElement(el, 'data-filter_value', filter_value, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_filter_value', filter_value, isRefresh);\n    }\n  },\n  __setAttributeValueOfElement: function __setAttributeValueOfElement(el, attrname, value, isRefresh, onlyHas) {\n    if (value) {\n      if (el.hasAttribute(attrname) && onlyHas) {\n        el.setAttribute(attrname, value);\n        return;\n      }\n\n      if (el.hasAttribute(attrname) && (!el.getAttribute(attrname) || isRefresh)) {\n        el.setAttribute(attrname, value);\n        return;\n      }\n    }\n  },\n  //. storePassData\n  storePassData: function storePassData(aTag) {\n    var dataParams = [];\n    var self = this;\n\n    var param = this.__getPassAttributes(aTag);\n\n    if (aTag.hasAttribute('data-actions')) {\n      return;\n    }\n\n    if (param.pass_to) {\n      dataParams.push(param);\n    }\n\n    var tags = aTag.querySelectorAll('[data-pass_to]');\n    tags.forEach(function (tag) {\n      var passParam = self.__getPassAttributes(tag);\n\n      if (passParam.pass_to) {\n        dataParams.push(passParam);\n      }\n    });\n    if (dataParams.length > 0) localStorage.setItem('dataParams', JSON.stringify(dataParams));\n  },\n  //. initValuePassBtns\n  __initValuePassBtns: function __initValuePassBtns() {// let forms = document.getElementsByTagName('form');\n    // for (let i=0; i < forms.length; i++) {\n    // \tlet form = forms[i];\n    // \tlet valuePassBtn = form.querySelector('.passValueBtn');\n    // \tif (valuePassBtn) this.__registerValuePassBtnEvent(form, valuePassBtn);\n    // }\n  },\n  __initGetValueInput: function __initGetValueInput() {\n    var inputs = document.querySelectorAll('input, textarea');\n    var self = this;\n\n    for (var i = 0; i < inputs.length; i++) {\n      var input = inputs[i];\n\n      if (!input.id) {\n        continue;\n      }\n\n      input.addEventListener('input', function (e) {\n        self.__setGetValueProcess(this.id, this.value);\n      });\n      input.addEventListener('updated_by_fetch', function (e) {\n        self.__setGetValueProcess(this.id, this.value);\n      });\n    }\n  },\n  //. initValuePassBtn\n  __registerValuePassBtnEvent: function __registerValuePassBtnEvent(form, valuePassBtn) {// let self = this;\n    // return;\n    // valuePassBtn.addEventListener('click', function(e) {\n    // \tlet inputs = form.querySelectorAll('input, textarea, select');\n    // \tif (valuePassBtn.hasAttribute('data-actions')) {\n    // \t\treturn;\n    // \t}\n    // \tlet valueParams = [];\n    // \tfor (let i = 0; i < inputs.length; i++) {\n    // \t\tlet input = inputs[i];\n    // \t\tlet pass_value_to = input.getAttribute('data-pass_value_to');\n    // \t\tlet value = input.value;\n    // \t\tif (pass_value_to) {\n    // \t\t\tvalueParams.push({\n    // \t\t\t\tpass_value_to: pass_value_to,\n    // \t\t\t\tvalue: value\n    // \t\t\t})\n    // \t\t}\n    // \t}\n    // \tif (valueParams.length > 0) localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    // \tself.__initPassValueParams();\n    // \tlet aTag = valuePassBtn.querySelector('a');\n    // \tif (aTag) self.setLinkProcess(aTag);\n    // })\n  },\n  passProcessAction: function passProcessAction(btn) {\n    var form = btn.closest('form');\n    if (!form) return;\n    var inputs = form.querySelectorAll('input, textarea, select');\n    var valueParams = [];\n    inputs.forEach(function (el) {\n      var pass_value_to = el.getAttribute('data-pass_value_to');\n      var value = el.value;\n\n      if (pass_value_to) {\n        valueParams.push({\n          pass_value_to: pass_value_to,\n          value: value\n        });\n      }\n    });\n\n    if (valueParams.length > 0) {\n      localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    }\n\n    this.__initPassValueParams(); // let aTag = btn.querySelector('a');\n    // if (aTag) this.setLinkProcess(aTag);\n    //. end event\n\n\n    document.dispatchEvent(new CustomEvent('passValueActionEnd', {\n      detail: {}\n    }));\n  },\n  setDataPassValues: function setDataPassValues(values) {\n    var valueParams = [];\n\n    for (var key in values) {\n      valueParams.push({\n        pass_value_to: key,\n        value: values[key]\n      });\n    }\n\n    if (valueParams.length > 0) {\n      localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    }\n  },\n  initDataPassValues: function initDataPassValues() {\n    localStorage.removeItem('valueParams');\n  },\n  //. openAnother\n  openAnother: function openAnother(atag) {\n    var href = atag.getAttribute('href');\n    var target = atag.getAttribute('target');\n\n    if (target == \"_blank\") {\n      window.open(href, \"_blank\");\n    } else if (target == \"_window\") {\n      window.open(href, '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');\n    } else {\n      window.open(href, \"_self\");\n    }\n  },\n  //. clickATaginButton\n  setLinkProcess: function setLinkProcess(aTag) {\n    if (aTag.hasAttribute('data-actions')) {\n      return;\n    }\n\n    var pass_to = aTag.getAttribute('data-pass_to');\n    var href = aTag.getAttribute('href');\n    this.storePassData(aTag);\n\n    if (this.checkOpenCocreateModal(aTag)) {\n      if (g_cocreateWindow) {\n        g_cocreateWindow.openWindow(aTag);\n      }\n    } else if (href) {\n      this.openAnother(aTag);\n    } else if (pass_to) {\n      this.__initPassParams(pass_to);\n    }\n  },\n  checkOpenCocreateModal: function checkOpenCocreateModal(atag) {\n    if (atag.getAttribute('target') === \"modal\") {\n      return true;\n    }\n\n    return false;\n  },\n  passSubmitProcess: function passSubmitProcess(element) {\n    if (element.parentNode.classList.contains('submitBtn')) {\n      if (element.getAttribute('data-pass_to') && element.getAttribute('data-pass_document_id')) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  },\n  __setGetValueProcess: function __setGetValueProcess(id, value) {\n    if (!id) return;\n    var targets = document.querySelectorAll('[data-get_value=\"' + id + '\"]');\n    targets.forEach(function (target) {\n      // target.value = value;\n      if (typeof target.value != \"undefined\") {\n        target.value = value;\n      } else if (typeof target.textContent != \"undefined\") {\n        target.textContent = value;\n      }\n\n      if (CoCreateFloatLabel) CoCreateFloatLabel.update(target);\n      target.dispatchEvent(new Event(\"input\", {\n        \"bubbles\": true\n      }));\n\n      if (target.classList.contains('searchInput')) {\n        var evt = new KeyboardEvent('keydown', {\n          'keyCode': 13\n        });\n        target.dispatchEvent(evt);\n      }\n    });\n  },\n  __initPassItems: function __initPassItems(id, selector, noFetch) {\n    var self = this;\n\n    if (id) {\n      var elements = document.querySelectorAll(selector);\n      elements.forEach(function (el) {\n        self.__setAttributeValueOfElement(el, 'data-document_id', id); // self.__setAttributeValueOfElement(el, 'data-fetch_document_id', id);\n\n\n        self.__setAttributeValueOfElement(el, 'data-filter_value', id);\n      });\n    }\n  }\n};\nvar CoCreateAttributes = {\n  //. key: colleciton.document_id.name,\n  //. example:  \n\n  /** modules.xxxxx.test: [\n   *\t{el: element, attr: 'data-test1'},\n   *\t{el: element, attr: 'data-test2'}\n   * ]\n   * \n   **/\n  mainInfo: {},\n  init: function init() {\n    // CoCreate.registerModule('fetch-attributes', this, null, this.getRequest, this.renderAttribute);\n    var self = this;\n    CoCreateSocket.listen('updateDocument', function (data) {\n      self.render(data);\n    });\n    CoCreateSocket.listen('readDocument', function (data) {\n      self.render(data);\n    });\n    CoCreateSocket.listen('connect', function (data) {\n      // self.getRequest()\n      self.__getRequest();\n    });\n  },\n  initElement: function initElement(container) {\n    var requests = this.__getRequest(container);\n\n    if (requests) {\n      requests.forEach(function (req) {\n        CoCreate.readDocument({\n          collection: req['collection'],\n          document_id: req['document_id']\n        });\n      });\n    }\n  },\n  render: function render(data) {\n    var _this = this;\n\n    var collection = data['collection'];\n    var document_id = data['document_id'];\n\n    var _loop = function _loop(name) {\n      var key = _this.__makeKey(collection, document_id, name);\n\n      var value = data.data[name];\n\n      if (_this.mainInfo[key]) {\n        _this.mainInfo[key].forEach(function (item) {\n          item.el.setAttribute(item.attr, value); // if (item.attr == 'data-collection') {\n          // \tCoCreate.runInitModule('cocreate-text');\t\t\t\t\t\t\n          // } \n\n          item.el.dispatchEvent(new CustomEvent('CoCreateAttribute-run', {\n            eventType: 'rendered',\n            item: item.el\n          }));\n        });\n      }\n    };\n\n    for (var name in data.data) {\n      _loop(name);\n    }\n  },\n  setValue: function setValue(element, data) {},\n  __getRequest: function __getRequest(container) {\n    var fetch_container = container || document;\n    var elements = fetch_container.querySelectorAll('[fetch-for]');\n    var self = this;\n    var requestData = [];\n\n    if (elements.length === 0 && fetch_container != document && fetch_container.hasAttributes('fetch-for')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(function (el) {\n      //. check\n      var el_collection = el.getAttribute('data-collection');\n      var el_documentId = el.getAttribute('data-document_id');\n      var el_name = el.getAttribute('name');\n      var el_value = el.getAttribute('value');\n      var attributes = el.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var jsonInfo = self.__jsonParse(attributes[i].value);\n\n        if (jsonInfo) {\n          (function () {\n            var collection = jsonInfo['collection'] || el_collection;\n            var document_id = jsonInfo['document_id'] || el_documentId;\n            var name = jsonInfo['name'] || el_name;\n            var value = jsonInfo['value'] || el_value;\n\n            if (jsonInfo['data-pass_id']) {\n              var pass_info = self.__checkPassId(jsonInfo['data-pass_id']);\n\n              if (pass_info) {\n                collection = pass_info.collection;\n                document_id = pass_info.document_id;\n                value = pass_info.value;\n              } else {\n                collection = null;\n                document_id = null;\n                value = null;\n              }\n            }\n\n            var key = self.__makeKey(collection, document_id, name);\n\n            if (collection && document_id && name) {\n              if (!self.mainInfo[key]) {\n                self.mainInfo[key] = [];\n              }\n\n              self.mainInfo[key].push({\n                el: el,\n                attr: attributes[i].name\n              });\n\n              if (!requestData.some(function (d) {\n                return d['collection'] === collection && d['document_id'] === document_id;\n              })) {\n                requestData.push({\n                  collection: collection,\n                  document_id: document_id\n                });\n              }\n            }\n          })();\n        }\n      }\n    });\n    return requestData;\n  },\n  __jsonParse: function __jsonParse(str_data) {\n    try {\n      var json_data = JSON.parse(str_data);\n\n      if (_typeof(json_data) === 'object' && json_data != null) {\n        return json_data;\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  },\n  __checkPassId: function __checkPassId(pass_id) {\n    var dataParams = localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return null;\n\n    for (var i = 0; i < dataParams.length; i++) {\n      if (dataParams[i].pass_to == pass_id) {\n        return {\n          collection: dataParams[i].collection,\n          document_id: dataParams[i].document_id,\n          value: dataParams[i].value\n        };\n      }\n    }\n\n    return null;\n  },\n  __makeKey: function __makeKey(collection, document_id, name) {\n    return \"\".concat(collection, \"_\").concat(document_id, \"_\").concat(name);\n  }\n};\nCoCreateAttributes.init();\nCoCreateLogic.init(); // CoCreateInit.register('CoCreateAttributes', CoCreateAttributes, CoCreateAttributes.initElement);\n\nCoCreateObserver.add({\n  name: 'CoCreateAttributes',\n  observe: ['subtree', 'childList'],\n  include: '[data-for]',\n  task: function task(mutation) {\n    CoCreateAttributes.initElement(mutation.target);\n  }\n}); // CoCreateInit.register('CoCreateLogic', CoCreateLogic, CoCreateLogic.initElement);\n\nCoCreateObserver.add({\n  name: 'CoCreateLogic',\n  observe: ['subtree', 'childList'],\n  include: '[data-pass_id]',\n  task: function task(mutation) {\n    CoCreateLogic.initElement(mutation.target);\n  }\n});\nCoCreateAction.registerEvent(\"passValueAction\", CoCreateLogic.passProcessAction, CoCreateLogic, \"passValueActionEnd\"); // export default CoCreateLogic;\n// export default CoCreateAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./CoCreate-components/CoCreate-logic/src/CoCreate-logic.js\n");

/***/ })

/******/ })["default"];
});